/*
 * This file is generated by jOOQ.
 */
package com.classDojo.entities.meta.tables;


import com.classDojo.entities.meta.Classdojo;
import com.classDojo.entities.meta.Keys;
import com.classDojo.entities.meta.tables.records.StudentattendancesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Studentattendances extends TableImpl<StudentattendancesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ClassDojo.StudentAttendances</code>
     */
    public static final Studentattendances STUDENTATTENDANCES = new Studentattendances();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentattendancesRecord> getRecordType() {
        return StudentattendancesRecord.class;
    }

    /**
     * The column <code>ClassDojo.StudentAttendances.id</code>.
     */
    public final TableField<StudentattendancesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ClassDojo.StudentAttendances.studentId</code>.
     */
    public final TableField<StudentattendancesRecord, Integer> STUDENTID = createField(DSL.name("studentId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ClassDojo.StudentAttendances.subject</code>.
     */
    public final TableField<StudentattendancesRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>ClassDojo.StudentAttendances.attendance</code>.
     */
    public final TableField<StudentattendancesRecord, Byte> ATTENDANCE = createField(DSL.name("attendance"), SQLDataType.TINYINT.defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    private Studentattendances(Name alias, Table<StudentattendancesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Studentattendances(Name alias, Table<StudentattendancesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ClassDojo.StudentAttendances</code> table reference
     */
    public Studentattendances(String alias) {
        this(DSL.name(alias), STUDENTATTENDANCES);
    }

    /**
     * Create an aliased <code>ClassDojo.StudentAttendances</code> table reference
     */
    public Studentattendances(Name alias) {
        this(alias, STUDENTATTENDANCES);
    }

    /**
     * Create a <code>ClassDojo.StudentAttendances</code> table reference
     */
    public Studentattendances() {
        this(DSL.name("StudentAttendances"), null);
    }

    public <O extends Record> Studentattendances(Table<O> child, ForeignKey<O, StudentattendancesRecord> key) {
        super(child, key, STUDENTATTENDANCES);
    }

    @Override
    public Schema getSchema() {
        return Classdojo.CLASSDOJO;
    }

    @Override
    public Identity<StudentattendancesRecord, Integer> getIdentity() {
        return (Identity<StudentattendancesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StudentattendancesRecord> getPrimaryKey() {
        return Keys.KEY_STUDENTATTENDANCES_PRIMARY;
    }

    @Override
    public List<UniqueKey<StudentattendancesRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentattendancesRecord>>asList(Keys.KEY_STUDENTATTENDANCES_PRIMARY);
    }

    @Override
    public Studentattendances as(String alias) {
        return new Studentattendances(DSL.name(alias), this);
    }

    @Override
    public Studentattendances as(Name alias) {
        return new Studentattendances(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Studentattendances rename(String name) {
        return new Studentattendances(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Studentattendances rename(Name name) {
        return new Studentattendances(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
